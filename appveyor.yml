version: '{build}'

configuration:
  - Static Debug
  - Static Release
#  - Shared Debug
#  - Shared Release

platform:
  - x86
  - x64

environment:
  matrix:
    - compiler: gcc-4.9.2-posix
#    - compiler: gcc-4.8.4-posix
    - compiler: msvc-12-seh
    - compiler: msvc-14-seh

artifacts:
  - path: '_build/CMakeFiles/*.log'
    name: logs
  - path: '_build/Testing/**/*.xml'
    name: test_results

install:
- ps: |
    # derive some extra information
    $env:configuration -match "(\w+) (\w+)" | Out-Null
    $env:linkage = $matches[1]
    $env:variant = $matches[2]
    if ($env:linkage -eq "Shared") { $env:shared="YES" } else { $env:shared="NO" }

    $env:compiler -match "(\w+)-([\d\.]+)-(\w+)" | Out-Null
    $env:compiler_name = $matches[1]
    $env:compiler_version = $matches[2]
    $env:compiler_threading = $matches[3]
    if ($env:platform -eq "x64") { $env:arch="x86_64" }
    elseif ($env:platform -eq "x86") { $env:arch="i686" }
    else { throw "Unknown platform" }

    # download the specific version of MinGW
    if ($env:compiler_name -eq "gcc")
    {
        $env:compiler_path=(python mingw.py --quiet --version "$env:compiler_version" --arch "$env:arch" --threading "$env:compiler_threading" --location "C:\mingw-builds") | Out-String
        "Path: #$env:compiler_path#"
        $env:compiler_path=$env:compiler_path.trim()
        "Path: #$env:compiler_path#"
    }

before_build:
- ps: |
    # Set up mingw commands
    if ($env:compiler_name -eq "gcc")
    {
        $env:generator = "MinGW Makefiles"
        $env:build = "mingw32-make -j4"
        $env:test = "mingw32-make CTEST_OUTPUT_ON_FAILURE=1 test"
    }
    # msvc specific commands
    elseif ($env:compiler_name -eq "msvc")
    {
        $env:generator = switch ($env:compiler_version) 
        { 
            "12" { "Visual Studio 12 2013" } 
            "14" { "Visual Studio 14 2015" }
            default { throw "Unknown Visual Studio compiler version" }
        }
        if ($env:platform -eq "x64")
        {
            $env:generator += " Win64"
        }
        $env:build = "cmake --build . --config $env:variant"
        $env:test = "ctest -c $env:variant -D CTEST_OUTPUT_ON_FAILURE:STRING=1"
    }
    else
    {
        throw "Unknown compiler"
    }
    # add the compiler path if needed
    if (-Not $env:compiler_path)
    {
        $env:PATH += ";$env:compiler_path"
    }
    # git bash conflicts with MinGW makefiles
    if ($env:generator -eq "MinGW Makefiles")
    {
        $env:PATH = $env:PATH.replace("C:\Program Files\Git\usr\bin;", "")
    }

build_script:
- ps: |
    md _build -Force | Out-Null
    cd _build
    "cmake -G `"$env:generator`" `"-DCMAKE_BUILD_TYPE=$env:variant`" `"-DBUILD_SHARED_LIBS=$env:shared`" .."
    & cmake -G "$env:generator" "-DCMAKE_BUILD_TYPE=$env:variant" "-DBUILD_SHARED_LIBS=$env:shared" ..
    if ($LastExitCode -ne 0) {
        throw "Exec: $ErrorMessage"
    }
    iex "& $env:build"
    if ($LastExitCode -ne 0) {
        throw "Exec: $ErrorMessage"
    }

test_script:
- ps: |
    iex "& $env:test"
    if ($LastExitCode -ne 0) {
        throw "Exec: $ErrorMessage"
    }

    function Add-CTest-Result($testResult)
    {
        $tests = ([xml](get-content $testResult)).Site.Testing
        $testsCount = 0
        $anyFailures = $FALSE

        foreach ($test in $tests.test) {
            $testsCount++
            $testName = $test.Name
            $testpath = $test.Path
            $timeNode = $test.SelectSingleNode('Results/NamedMeasurement[@name="Execution Time"]/Value')
            if ($test.status -eq "failure") {
                $time = ([double]$timeNode.InnerText * 1000)
                Add-AppveyorTest $testName -Outcome Failed -FileName $testpath -Duration $time -ErrorMessage $($test.results.measurement.value)
                Add-AppveyorMessage `"$testName failed`" -Category Error
                $anyFailures = $TRUE
            }
            elseif ($test.status -eq "skipped") {
                Add-AppveyorTest $testName -Outcome Ignored -Filename $testpath
            }
            else {
                $time = ([double]$timeNode.InnerText * 1000)
                Add-AppveyorTest $testName -Outcome Passed -FileName $testpath -Duration $time -StdOut $($test.results.measurement.value)
            }
        }
        return $testsCount, $anyFailures
    }

    $testsCount = 0
    $anyFailures = $FALSE

    # Run tests and upload results to AppVeyor one by one
    Get-ChildItem ".\Testing\*.xml" -Recurse | foreach {
        $testfile = $_.fullname
        $count, $testsResult = Add-CTest-Result $testfile
        Write-Host "Found $testfile with $count tests"
        $testsCount = $testsCount + $count
        $anyFailures = $anyFailures -or $testsResult
    }

    Write-Host "There are $testsCount tests found"

    if ($anyFailures -eq $TRUE){
        Write-Host "Failing build as there are broken tests"
        $host.SetShouldExit(1)
    }

matrix:
  fast_finish: true

cache:
  - C:\mingw-builds
